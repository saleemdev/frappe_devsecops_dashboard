import r from"./index-B0yp3bM1.js";const i="/api/method",n=r.create({baseURL:i,timeout:3e4,headers:{"Content-Type":"application/json","X-Frappe-CSRF-Token":window.csrf_token||""}});n.interceptors.request.use(e=>(window.csrf_token&&(e.headers["X-Frappe-CSRF-Token"]=window.csrf_token),e.headers.Accept="application/json",e.headers["Content-Type"]="application/json",delete e.headers.Expect,e),e=>Promise.reject(e));n.interceptors.response.use(e=>e,e=>Promise.reject(e));const o=async()=>{try{const e=await n.get("/frappe_devsecops_dashboard.api.dashboard.get_dashboard_data");if(e.data&&e.data.message){const t=e.data.message;return{success:t.success||!1,projects:d(t.projects||[]),metrics:l(t.metrics||{}),lifecycle_phases:t.lifecycle_phases||[],timestamp:t.timestamp}}throw new Error("Invalid response format")}catch(e){return{success:!1,error:e.message||"Failed to fetch dashboard data",projects:[],metrics:{total_projects:0,active_projects:0,total_tasks:0,completed_tasks:0,average_completion:0,team_capacity:0,completion_rate:0},lifecycle_phases:[]}}},_=async e=>{try{const t=await n.get("/frappe_devsecops_dashboard.api.dashboard.get_project_details",{params:{project_name:e}});if(t.data&&t.data.message){const s=t.data.message;if(s.success)return{success:!0,project:p(s.project)};throw new Error(s.error||"Failed to fetch project details")}throw new Error("Invalid response format")}catch(t){return{success:!1,error:t.message||"Failed to fetch project details",project:null}}},d=e=>e.map(t=>p(t)),p=e=>({id:e.id||e.name,name:e.name||e.project_name||"Unnamed Project",project_name:e.project_name||e.name,project_status:e.project_status||e.status||"Open",status:e.status||e.project_status||"Open",client:e.client||e.customer||"No Client",customer:e.customer||e.client,project_type:e.project_type||"Standard",priority:e.priority||"Medium",progress:parseFloat(e.progress||e.percent_complete||0),percent_complete:parseFloat(e.percent_complete||e.progress||0),completion_rate:parseFloat(e.completion_rate||0),task_count:parseInt(e.task_count||0),total_tasks:parseInt(e.total_tasks||e.task_count||0),completed_tasks:parseInt(e.completed_tasks||0),current_phase:e.current_phase||"Planning",currentPhase:e.currentPhase||e.current_phase||"Planning",delivery_phases:c(e.delivery_phases||[]),deliveryPhases:c(e.delivery_phases||[]),expected_start_date:e.expected_start_date,expected_end_date:e.expected_end_date,actual_start_date:e.actual_start_date,actual_end_date:e.actual_end_date,cost_center:e.cost_center,department:e.department,tasks:e.tasks||[]}),c=e=>e.map(t=>({section_id:t.section_id,section_name:t.section_name||t.name,section_status:t.section_status||t.status,section_progress:parseFloat(t.section_progress||t.progress||0),section_order:parseInt(t.section_order||0),task_count:parseInt(t.task_count||0),completed_tasks:parseInt(t.completed_tasks||0),in_progress_tasks:parseInt(t.in_progress_tasks||0),name:t.name||t.section_name,status:t.status||t.section_status,progress:parseFloat(t.progress||t.section_progress||0)})),l=e=>({total_projects:parseInt(e.total_projects||0),active_projects:parseInt(e.active_projects||0),activeProjects:parseInt(e.active_projects||e.activeProjects||0),total_tasks:parseInt(e.total_tasks||0),totalTasks:parseInt(e.total_tasks||e.totalTasks||0),completed_tasks:parseInt(e.completed_tasks||0),completedTasks:parseInt(e.completed_tasks||e.completedTasks||0),average_completion:parseFloat(e.average_completion||0),completion_rate:parseFloat(e.completion_rate||0),team_capacity:parseFloat(e.team_capacity||0),teamCapacity:parseFloat(e.team_capacity||e.teamCapacity||0)}),m=async()=>{try{const e=await r.get("/api/resource/Task Type",{headers:{"X-Frappe-CSRF-Token":window.csrf_token||""}});return e.data&&e.data.data?e.data.data.map(t=>({name:t.name,description:t.description||`${t.name} phase`})):[]}catch{return[]}},u=async()=>{try{const e=await r.get("/api/resource/Project",{params:{fields:JSON.stringify(["name","project_name","status","customer","percent_complete"]),filters:JSON.stringify([["disabled","=",0]])},headers:{"X-Frappe-CSRF-Token":window.csrf_token||""}});return e.data&&e.data.data?e.data.data:[]}catch{return[]}},g=async e=>{try{const t=await r.get("/api/resource/Task",{params:{fields:JSON.stringify(["name","subject","status","priority","project","task_type","exp_start_date","exp_end_date","_assign","description"]),filters:JSON.stringify([["project","=",e]]),limit_page_length:999},headers:{"X-Frappe-CSRF-Token":window.csrf_token||""}});return t.data&&t.data.data?t.data.data.map(a=>({id:a.name,name:a.name,subject:a.subject,status:a.status,priority:a.priority,project:a.project,task_type:a.task_type,due_date:a.exp_end_date,start_date:a.exp_start_date,assigned_to:a._assign?JSON.parse(a._assign)[0]:null,description:a.description})):[]}catch{return[]}},f=o,k={getDashboardData:o,getProjectDetails:_,getTaskTypes:m,getProjects:u,getProjectsWithTasks:o,getProjectTasksWithTypes:g};export{k as default,o as getDashboardData,_ as getProjectDetails,g as getProjectTasksWithTypes,u as getProjects,f as getProjectsWithTasks,m as getTaskTypes};
